#!/bin/bash 

path=$(pwd)

function MAN_PAGE(){ 
S1=$(date +%S ) 
h1=$(date +%H ) 
M1=$(date +%M ) 

cd  /sources/
    tar -xvf man-pages-6.03.tar.xz
    cd  /sources/man-pages-6.03
    man-pages-6.03
    rm -rf /sources/man-pages-6.03
h2=$(date +%H ) 
M2=$(date +%M ) 
S2=$(date +%S ) 
echo "${FUNCNAME[0]} is finished $((h1-h2))hour $((M1-M2))minutes $((S1- S2 ))seconds" >> finish.txt

}


function IANA(){ 
S1=$(date +%S ) 
h1=$(date +%H ) 
M1=$(date +%M ) 

cd  /sources/
    tar -xvf iana-etc-20230202.tar.gz
    cd /sources/iana-etc-20230202
    cp services protocols /etc
    rm -rf /sources/iana-etc-20230202
   h2=$(date +%H ) 
M2=$(date +%M ) 
S2=$(date +%S ) 
echo "${FUNCNAME[0]} is finished $((h1-h2))hour $((M1-M2))minutes $((S1- S2 ))seconds" >> /finish.txt



}

function GLIB(){ 
S1=$(date +%S ) 
h1=$(date +%H ) 
M1=$(date +%M ) 

cd  /sources/
    tar -xvf glibc-2.37.tar.xz
    cd /sources/glibc-2.37
    patch -Np1 -i ../glibc-2.37-fhs-1.patch
    sed '/width -=/s/workend - string/number_length/' \
 -i stdio-common/vfprintf-process-arg.c
mkdir -v build
cd build
echo "rootsbindir=/usr/sbin" > configparms
../configure --prefix=/usr /
 --disable-werror /
 --enable-kernel=3.2 /
 --enable-stack-protector=strong /
 --with-headers=/usr/include /
libc_cv_slibdir=/usr/lib /

make
make check
touch /etc/ld.so.conf
sed '/test-installation/s@$(PERL)@echo not running@' -i ../Makefile
make install
sed '/RTLDLIST=/s@/usr@@g' -i /usr/bin/ldd
cp -v ../nscd/nscd.conf /etc/nscd.conf
mkdir -pv /var/cache/nscd
mkdir -pv /usr/lib/locale
localedef -i POSIX -f UTF-8 C.UTF-8 2> /dev/null || true
localedef -i cs_CZ -f UTF-8 cs_CZ.UTF-8
localedef -i de_DE -f ISO-8859-1 de_DE
localedef -i de_DE@euro -f ISO-8859-15 de_DE@euro
localedef -i de_DE -f UTF-8 de_DE.UTF-8
localedef -i el_GR -f ISO-8859-7 el_GR
localedef -i en_GB -f ISO-8859-1 en_GB
localedef -i en_GB -f UTF-8 en_GB.UTF-8
localedef -i en_HK -f ISO-8859-1 en_HK
localedef -i en_PH -f ISO-8859-1 en_PH
localedef -i en_US -f ISO-8859-1 en_US
localedef -i en_US -f UTF-8 en_US.UTF-8
localedef -i es_ES -f ISO-8859-15 es_ES@euro
localedef -i es_MX -f ISO-8859-1 es_MX
localedef -i fa_IR -f UTF-8 fa_IR
localedef -i fr_FR -f ISO-8859-1 fr_FR
localedef -i fr_FR@euro -f ISO-8859-15 fr_FR@euro
localedef -i fr_FR -f UTF-8 fr_FR.UTF-8
localedef -i is_IS -f ISO-8859-1 is_IS
localedef -i is_IS -f UTF-8 is_IS.UTF-8
localedef -i it_IT -f ISO-8859-1 it_IT
localedef -i it_IT -f ISO-8859-15 it_IT@euro
localedef -i it_IT -f UTF-8 it_IT.UTF-8
localedef -i ja_JP -f EUC-JP ja_JP
localedef -i ja_JP -f SHIFT_JIS ja_JP.SJIS 2> /dev/null || true
localedef -i ja_JP -f UTF-8 ja_JP.UTF-8
localedef -i nl_NL@euro -f ISO-8859-15 nl_NL@euro
localedef -i ru_RU -f KOI8-R ru_RU.KOI8-R
localedef -i ru_RU -f UTF-8 ru_RU.UTF-8
localedef -i se_NO -f UTF-8 se_NO.UTF-8
localedef -i ta_IN -f UTF-8 ta_IN.UTF-8
localedef -i tr_TR -f UTF-8 tr_TR.UTF-8
localedef -i zh_CN -f GB18030 zh_CN.GB18030
localedef -i zh_HK -f BIG5-HKSCS zh_HK.BIG5-HKSCS
localedef -i zh_TW -f UTF-8 zh_TW.UTF-8
make localedata/install-locales
localedef -i POSIX -f UTF-8 C.UTF-8 2> /dev/null || true
localedef -i ja_JP -f SHIFT_JIS ja_JP.SJIS 2> /dev/null || true
#!/bin/bash
cat > /etc/nsswitch.conf << "EOF"
# Begin /etc/nsswitch.conf
passwd: files
group: files
shadow: files
hosts: files dns
networks: files
protocols: files
services: files
ethers: files
rpc: files
# End /etc/nsswitch.conf
EOF

tar -xf /sources/tzdata2022g.tar.gz
ZONEINFO=/usr/share/zoneinfo
mkdir -pv $ZONEINFO/{posix,right}
for tz in etcetera southamerica northamerica europe africa antarctica asia australasia backward ; do
 zic -L /dev/null
 -d $ZONEINFO
 ${tz}
 zic -L /dev/null /
  -d $ZONEINFO/posix ${tz}
 zic -L leapseconds -d $ZONEINFO/right ${tz}
done
cp -v zone.tab zone1970.tab iso3166.tab $ZONEINFO
zic -d $ZONEINFO -p America/New_York
unset ZONEINFO
tzselect
ln -sfv /usr/share/zoneinfo/<xxx> /etc/localtime
cat > /etc/ld.so.conf << "EOF"
# Begin /etc/ld.so.conf
/usr/local/lib
/opt/lib
EOF
cat >> /etc/ld.so.conf << "EOF"
# Add an include directory
include /etc/ld.so.conf.d/*.conf
EOF
mkdir -pv /etc/ld.so.conf.d
rm -rf /sources/glibc-2.37
h2=$(date +%H ) 
M2=$(date +%M ) 
S2=$(date +%S ) 
echo "${FUNCNAME[0]} is finished $((h1-h2))hour $((M1-M2))minutes $((S1- S2 ))seconds" >> /finish.txt

}



function ZLIB(){ 
S1=$(date +%S ) 
h1=$(date +%H ) 
M1=$(date +%M ) 

 cd  /sources/
    tar -xvf zlib-1.2.13.tar.xz 
    cd /sources/zlib-1.2.13
    ./configure --prefix=/usr
    make
    make check
    make install
    rm -fv /usr/lib/libz.a
rm -rf /sources/zlib-1.2.13
h2=$(date +%H ) 
M2=$(date +%M ) 
S2=$(date +%S ) 
echo "${FUNCNAME[0]} is finished $((h1-h2))hour $((M1-M2))minutes $((S1- S2 ))seconds" >> /finish.txt

}




function BZIP(){ 
S1=$(date +%S ) 
h1=$(date +%H ) 
M1=$(date +%M ) 

    cd  /sources/
    tar -xvf bzip2-1.0.8.tar.gz
    cd /sources/bzip2-1.0.8
    patch -Np1 -i ../bzip2-1.0.8-install_docs-1.patch
    sed -i 's@\(ln -s -f \)$(PREFIX)/bin/@\1@' Makefile
    sed -i "s@(PREFIX)/man@(PREFIX)/share/man@g" Makefile
    make -f Makefile-libbz2_so
make clean
make
make PREFIX=/usr install
cp -av libbz2.so.* /usr/lib
ln -sv libbz2.so.1.0.8 /usr/lib/libbz2.so
cp -v bzip2-shared /usr/bin/bzip2
for i in /usr/bin/{bzcat,bunzip2}; do
ln -sfv bzip2 $i
done
rm -fv /usr/lib/libbz2.a
rm -rf /sources/bzip2-1.0.8
h2=$(date +%H ) 
M2=$(date +%M ) 
S2=$(date +%S ) 
echo "${FUNCNAME[0]} is finished $((h1-h2))hour $((M1-M2))minutes $((S1- S2 ))seconds" >> /finish.txt


}

function XZ(){ 
S1=$(date +%S ) 
h1=$(date +%H ) 
M1=$(date +%M ) 

cd  /sources/
    tar -xvf xz-5.4.1.tar.xz
    cd  /sources/xz-5.4.1
    ./configure --prefix=/usr \
 --disable-static \
 --docdir=/usr/share/doc/xz-5.4.1


    make
    make check
    make install
    rm -rf /sources/xz-5.4.1
   h2=$(date +%H ) 
M2=$(date +%M ) 
S2=$(date +%S ) 
echo "${FUNCNAME[0]} is finished $((h1-h2))hour $((M1-M2))minutes $((S1- S2 ))seconds" >> /finish.txt



}

function ZSTD(){ 
S1=$(date +%S ) 
h1=$(date +%H ) 
M1=$(date +%M ) 

cd  /sources/
 tar -xvf zstd-1.5.4.tar.gz 
 cd /sources/zstd-1.5.4
 make prefix=/usr
 
make check
make prefix=/usr install
rm -v /usr/lib/libzstd.a
rm -rf /sources/zstd-1.5.4
h2=$(date +%H ) 
M2=$(date +%M ) 
S2=$(date +%S ) 
echo "${FUNCNAME[0]} is finished $((h1-h2))hour $((M1-M2))minutes $((S1- S2 ))seconds" >> /finish.txt

}


function FILE(){ 
S1=$(date +%S ) 
h1=$(date +%H ) 
M1=$(date +%M ) 

cd  /sources/
 tar -xvf file-5.44.tar.gz
 cd /sources/file-5.44
 ./configure --prefix=/usr
 make
 make check
 make install
 rm -rf /sources/zstd-1.5.4
h2=$(date +%H ) 
M2=$(date +%M ) 
S2=$(date +%S ) 
echo "${FUNCNAME[0]} is finished $((h1-h2))hour $((M1-M2))minutes $((S1- S2 ))seconds" >> /finish.txt



}

function  READLINE(){ 
S1=$(date +%S ) 
h1=$(date +%H ) 
M1=$(date +%M ) 

cd  /sources/
 tar -xvf readline-8.2.tar.gz  
 cd /sources/readline-8.2
 sed -i '/MV.*old/d' Makefile.in
sed -i '/{OLDSUFF}/c:' support/shlib-install
patch -Np1 -i ../readline-8.2-upstream_fix-1.patch
./configure --prefix=/usr \
 --disable-static \
 --with-curses \
 --docdir=/usr/share/doc/readline-8.2
make SHLIB_LIBS="-lncursesw"
make SHLIB_LIBS="-lncursesw" install
install -v -m644 doc/*.{ps,pdf,html,dvi} /usr/share/doc/readline-8.2
rm -rf /sources/readline-8.2
h2=$(date +%H ) 
M2=$(date +%M ) 
S2=$(date +%S ) 
echo "${FUNCNAME[0]} is finished $((h1-h2))hour $((M1-M2))minutes $((S1- S2 ))seconds" >> /finish.txt

}


function M4 (){ 
S1=$(date +%S ) 
h1=$(date +%H ) 
M1=$(date +%M ) 


cd  /sources/
tar -xvf m4-1.4.19.tar.xz
cd /sources/m4-1.4.19
./configure --prefix=/usr
make
make check
make install
rm -rf /sources/m4-1.4.19
h2=$(date +%H ) 
M2=$(date +%M ) 
S2=$(date +%S ) 
echo "${FUNCNAME[0]} is finished $((h1-h2))hour $((M1-M2))minutes $((S1- S2 ))seconds" >> /finish.txt

}


function BC (){ 
S1=$(date +%S ) 
h1=$(date +%H ) 
M1=$(date +%M ) 

cd  /sources/
tar -xvf bc-6.2.4.tar.xz
cd /sources/bc-6.2.4
CC=gcc ./configure --prefix=/usr -G -O3 -r
make
make test
make install
rm -rf /sources/bc-6.2.4
h2=$(date +%H ) 
M2=$(date +%M ) 
S2=$(date +%S ) 
echo "${FUNCNAME[0]} is finished $((h1-h2))hour $((M1-M2))minutes $((S1- S2 ))seconds" >> /finish.txt

}

function FLEX(){ 
S1=$(date +%S ) 
h1=$(date +%H ) 
M1=$(date +%M ) 

    cd  /sources/
 tar -xvf flex-2.6.4.tar.gz
 cd /sources/flex-2.6.4
 ./configure --prefix=/usr \
    --docdir=/usr/share/doc/flex-2.6.4 \
    --disable-static
make
make check
make install
ln -sv flex /usr/bin/lex
rm -rf /sources/flex-2.6.4
h2=$(date +%H ) 
M2=$(date +%M ) 
S2=$(date +%S ) 
echo "${FUNCNAME[0]} is finished $((h1-h2))hour $((M1-M2))minutes $((S1- S2 ))seconds" >> /finish.txt

}


function TCL(){ 
S1=$(date +%S ) 
h1=$(date +%H ) 
M1=$(date +%M ) 

 cd  /sources/
 tar -xvf tcl8.6.13-src.tar.gz
 cd /sources/tcl8.6.13-src
 SRCDIR=$(pwd)
cd unix
./configure --prefix=/usr \
    --mandir=/usr/share/man
make
sed -e "s|$SRCDIR/unix|/usr/lib|" \
 -e "s|$SRCDIR|/usr/include|" \
 -i tclConfig.sh
 sed -e "s|$SRCDIR/unix/pkgs/tdbc1.1.5|/usr/lib/tdbc1.1.5|" \
 -e "s|$SRCDIR/pkgs/tdbc1.1.5/generic|/usr/include|" \
 -e "s|$SRCDIR/pkgs/tdbc1.1.5/library|/usr/lib/tcl8.6|" \
 -e "s|$SRCDIR/pkgs/tdbc1.1.5|/usr/include|" \
 -i pkgs/tdbc1.1.5/tdbcConfig.sh
 sed -e "s|$SRCDIR/unix/pkgs/itcl4.2.3|/usr/lib/itcl4.2.3|" \
 -e "s|$SRCDIR/pkgs/itcl4.2.3/generic|/usr/include|" \
 -e "s|$SRCDIR/pkgs/itcl4.2.3|/usr/include|" \
 -i pkgs/itcl4.2.3/itclConfig.sh
 unset SRCDIR
make test
make install
chmod -v u+w /usr/lib/libtcl8.6.so
make install-private-headers
ln -sfv tclsh8.6 /usr/bin/tclsh
mv /usr/share/man/man3/{Thread,Tcl_Thread}.3
cd ..
tar -xf ../tcl8.6.13-html.tar.gz --strip-components=1
mkdir -v -p /usr/share/doc/tcl-8.6.13
cp -v -r ./html/* /usr/share/doc/tcl-8.6.13
rm -rf /sources/tcl8.6.13-src
h2=$(date +%H ) 
M2=$(date +%M ) 
S2=$(date +%S ) 
echo "${FUNCNAME[0]} is finished $((h1-h2))hour $((M1-M2))minutes $((S1- S2 ))seconds" >> /finish.txt

}


function EXPECT(){ 
S1=$(date +%S ) 
h1=$(date +%H ) 
M1=$(date +%M ) 

cd  /sources/
 tar -xvf expect5.45.4.tar.gz
 cd /sources/expect5.45.4
 ./configure --prefix=/usr \
 --with-tcl=/usr/lib \
 --enable-shared \
 --mandir=/usr/share/man \
 --with-tclinclude=/usr/include

make
make test

make install
ln -svf expect5.45.4/libexpect5.45.4.so /usr/lib
rm -rf /sources/expect5.45.4
h2=$(date +%H ) 
M2=$(date +%M ) 
S2=$(date +%S ) 
echo "${FUNCNAME[0]} is finished $((h1-h2))hour $((M1-M2))minutes $((S1- S2 ))seconds" >> /finish.txt

}


function DEJAGNU(){ 
S1=$(date +%S ) 
h1=$(date +%H ) 
M1=$(date +%M ) 

cd  /sources/
 tar -xvf dejagnu-1.6.3.tar.gz
 cd /sources/dejagnu-1.6.3
 mkdir -v build
cd build
../configure --prefix=/usr
makeinfo --html --no-split -o doc/dejagnu.html ../doc/dejagnu.texi
makeinfo --plaintext -o doc/dejagnu.txt ../doc/dejagnu.texi
make install
install -v -dm755 /usr/share/doc/dejagnu-1.6.3
install -v -m644 doc/dejagnu.{html,txt} /usr/share/doc/dejagnu-1.6.3
make check

rm -rf /sources/dejagnu-1.6.3
h2=$(date +%H ) 
M2=$(date +%M ) 
S2=$(date +%S ) 
echo "${FUNCNAME[0]} is finished $((h1-h2))hour $((M1-M2))minutes $((S1- S2 ))seconds" >> /finish.txt

}



function BINUTILS(){ 
S1=$(date +%S ) 
h1=$(date +%H ) 
M1=$(date +%M ) 

cd  /sources/
 tar -xvf  binutils-2.40.tar.xz
 cd /sources/binutils-2.40
expect -c "spawn ls"
mkdir -v build
cd build
../configure --prefix=/usr \
 --sysconfdir=/etc \
 --enable-gold \
 --enable-ld=default \
 --enable-plugins \
 --enable-shared \
 --disable-werror \
 --enable-64-bit-bfd \
 --with-system-zlib
make tooldir=/usr
make -k check
grep '^FAIL:' $(find -name '*.log')
make tooldir=/usr install
rm -fv /usr/lib/lib{bfd,ctf,ctf-nobfd,sframe,opcodes}.a
rm -fv /usr/share/man/man1/{gprofng,gp-*}.1
rm -rf /sources/binutils-2.40
h2=$(date +%H ) 
M2=$(date +%M ) 
S2=$(date +%S ) 
echo "${FUNCNAME[0]} is finished $((h1-h2))hour $((M1-M2))minutes $((S1- S2 ))seconds" >> /finish.txt

}

function GMP(){ 
S1=$(date +%S ) 
h1=$(date +%H ) 
M1=$(date +%M ) 

cd  /sources/
 tar -xvf gmp-6.2.1.tar.xz
 cd /sources/gmp-6.2.1
 ABI=32 ./configure ...
 cp -v configfsf.guess config.guess
cp -v configfsf.sub config.sub
./configure --prefix=/usr \
 --enable-cxx \
 --disable-static \
 --docdir=/usr/share/doc/gmp-6.2.1
make
make html
make check 2>&1 | tee gmp-check-log
awk '/# PASS:/{total+=$3} ; END{print total}' gmp-check-log
make install
make install-html
 rm -rf /sources/gmp-6.2.1
h2=$(date +%H ) 
M2=$(date +%M ) 
S2=$(date +%S ) 
echo "${FUNCNAME[0]} is finished $((h1-h2))hour $((M1-M2))minutes $((S1- S2 ))seconds" >> /finish.txt



}



function MPFR(){ 
S1=$(date +%S ) 
h1=$(date +%H ) 
M1=$(date +%M ) 

cd  /sources/
 tar -xvf mpfr-4.2.0.tar.xz
 cd /sources/mpfr-4.2.0
 sed -e 's/+01,234,567/+1,234,567 /' \
 -e 's/13.10Pd/13Pd/' \
 -i tests/tsprintf.c

./configure --prefix=/usr \
 --disable-static \
 --enable-thread-safe \
 --docdir=/usr/share/doc/mpfr-4.2.0
make
make html
make check
make install
make install-html
rm -rf /sources/mpfr-4.2.0
h2=$(date +%H ) 
M2=$(date +%M ) 
S2=$(date +%S ) 
echo "${FUNCNAME[0]} is finished $((h1-h2))hour $((M1-M2))minutes $((S1- S2 ))seconds" >> /finish.txt

}


function MPC(){ 
S1=$(date +%S ) 
h1=$(date +%H ) 
M1=$(date +%M ) 

cd  /sources/
 tar -xvf mpc-1.3.1.tar.gz
 cd /sources/mpc-1.3.1
./configure --prefix=/usr \
 --disable-static \
 --docdir=/usr/share/doc/mpc-1.3.1
make
make html
make check
make install
make install-html
rm -rf /sources/mpc-1.3.1
h2=$(date +%H ) 
M2=$(date +%M ) 
S2=$(date +%S ) 
echo "${FUNCNAME[0]} is finished $((h1-h2))hour $((M1-M2))minutes $((S1- S2 ))seconds" >> /finish.txt

}




function ATTR(){ 
S1=$(date +%S ) 
h1=$(date +%H ) 
M1=$(date +%M ) 

cd  /sources/
 tar -xvf attr-2.5.1.tar.gz
 cd /sources/attr-2.5.1

./configure --prefix=/usr \
 --disable-static \
 --sysconfdir=/etc \
 --docdir=/usr/share/doc/attr-2.5.1
make
make check
make install
 rm -rf /sources/attr-2.5.1
h2=$(date +%H ) 
M2=$(date +%M ) 
S2=$(date +%S ) 
echo "${FUNCNAME[0]} is finished $((h1-h2))hour $((M1-M2))minutes $((S1- S2 ))seconds" >> /finish.txt



}

function ACL(){ 
S1=$(date +%S ) 
h1=$(date +%H ) 
M1=$(date +%M ) 

cd  /sources/
 tar -xvf acl-2.3.1.tar.xz
 cd /sources/acl-2.3.1

./configure --prefix=/usr \
 --disable-static \
 --docdir=/usr/share/doc/acl-2.3.1
make
make install
 rm -rf /sources/acl-2.3.1
h2=$(date +%H ) 
M2=$(date +%M ) 
S2=$(date +%S ) 
echo "${FUNCNAME[0]} is finished $((h1-h2))hour $((M1-M2))minutes $((S1- S2 ))seconds" >> /finish.txt



}

function LIBCAP(){ 
S1=$(date +%S ) 
h1=$(date +%H ) 
M1=$(date +%M ) 

cd  /sources/
 tar -xvf libcap-2.67.tar.xz
 cd /sources/libcap-2.67.tar.xz


sed -i '/install -m.*STA/d' libcap/Makefile
make prefix=/usr lib=lib
make test
make prefix=/usr lib=lib install
rm -rf /sources/libcap-2.67
h2=$(date +%H ) 
M2=$(date +%M ) 
S2=$(date +%S ) 
echo "${FUNCNAME[0]} is finished $((h1-h2))hour $((M1-M2))minutes $((S1- S2 ))seconds" >> /finish.txt

}


function SHADOW(){ 
S1=$(date +%S ) 
h1=$(date +%H ) 
M1=$(date +%M ) 

cd  /sources/
 tar -xvf shadow-4.13.tar.xz
 cd /sources/shadow-4.13
 sed -i 's/groups$(EXEEXT) //' src/Makefile.in
find man -name Makefile.in -exec sed -i 's/groups\.1 / /' {} \;
find man -name Makefile.in -exec sed -i 's/getspnam\.3 / /' {} \;
find man -name Makefile.in -exec sed -i 's/passwd\.5 / /' {} \;
sed -e 's:#ENCRYPT_METHOD DES:ENCRYPT_METHOD SHA512:' \
 -e 's@#\(SHA_CRYPT_..._ROUNDS 5000\)@\100@' \
 -e 's:/var/spool/mail:/var/mail:'\
 -e '/PATH=/{s@/sbin:@@;s@/bin:@@}'\
 -i etc/login.defs
sed -i 's:DICTPATH.*:DICTPATH\t/lib/cracklib/pw_dict:' etc/login.defs
touch /usr/bin/passwd
./configure --sysconfdir=/etc \
 --disable-static \
 --with-group-name-max-length=32
make
make exec_prefix=/usr install
make -C man install-man
pwconv
grpconv
mkdir -p /etc/default
useradd -D --gid 999
sed -i '/MAIL/s/yes/no/' /etc/default/useradd
passwd root
 rm -rf /sources/shadow-4.13
h2=$(date +%H ) 
M2=$(date +%M ) 
S2=$(date +%S ) 
echo "${FUNCNAME[0]} is finished $((h1-h2))hour $((M1-M2))minutes $((S1- S2 ))seconds" >> /finish.txt



}



function GCC(){ 
S1=$(date +%S ) 
h1=$(date +%H ) 
M1=$(date +%M ) 

cd  /sources/
 tar -xvf gcc-12.2.0.tar.xz
 cd /sources/gcc-12.2.0
case $(uname -m) in
x86_64)
sed -e '/m64=/s/lib64/lib/' \
 -i.orig gcc/config/i386/t-linux64
;;
esac
mkdir -v build
cd build
../configure --prefix=/usr \
 LD=ld \
 --enable-languages=c,c++ \
 --enable-default-pie \
 --enable-default-ssp \
 --disable-multilib \
 --disable-bootstrap \
 --with-system-zlib
 make
 ulimit -s 32768
 chown -Rv tester .
su tester -c "PATH= make -k check"
 ../contrib/test_summary
 make install

chown -v -R root:root \
 /usr/lib/gcc/$(gcc -dumpmachine)/12.2.0/include{,-fixed}
 ln -svr /usr/bin/cpp /usr/lib
 ln -sfv ../../libexec/gcc/$(gcc -dumpmachine)/12.2.0/liblto_plugin.so \
 /usr/lib/bfd-plugins/
 echo 'int main(){ 
S1=$(date +%S ) 
h1=$(date +%H ) 
M1=$(date +%M ) 
}' > dummy.c
cc dummy.c -v -Wl,--verbose &> dummy.log
readelf -l a.out | grep ': /lib'
grep -E -o '/usr/lib.*/S?crt[1in].*succeeded' dummy.log
grep -B4 '^ /usr/include' dummy.log
grep 'SEARCH.*/usr/lib' dummy.log |sed 's|; |\n|g'
grep "/lib.*/libc.so.6 " dummy.log
grep found dummy.log
rm -v dummy.c a.out dummy.log
mkdir -pv /usr/share/gdb/auto-load/usr/lib
mv -v /usr/lib/*gdb.py /usr/share/gdb/auto-load/usr/lib
 rm -rf /sources/gcc-12.2.0
h2=$(date +%H ) 
M2=$(date +%M ) 
S2=$(date +%S ) 
echo "${FUNCNAME[0]} is finished $((h1-h2))hour $((M1-M2))minutes $((S1- S2 ))seconds" >> /finish.txt



}


function PKG_CONFIG(){ 
S1=$(date +%S ) 
h1=$(date +%H ) 
M1=$(date +%M ) 


cd  /sources/
 tar -xvf pkg-config-0.29.2.tar.gz
 cd /sources/pkg-config-0.29.2
./configure --prefix=/usr \
 --with-internal-glib \
 --disable-host-tool \
 --docdir=/usr/share/doc/pkg-config-0.29.2
make
make check
make install

 rm -rf /sources/pkg-config-0.29.2
h2=$(date +%H ) 
M2=$(date +%M ) 
S2=$(date +%S ) 
echo "${FUNCNAME[0]} is finished $((h1-h2))hour $((M1-M2))minutes $((S1- S2 ))seconds" >> /finish.txt



}

function NCURSES(){ 
S1=$(date +%S ) 
h1=$(date +%H ) 
M1=$(date +%M ) 

cd  /sources/
 tar -xvf ncurses-6.4.tar.gz
 cd /sources/ncurses-6.4
./configure --prefix=/usr \
 --mandir=/usr/share/man \
 --with-shared \
 --without-debug \
 --without-normal \
 --with-cxx-shared \
 --enable-pc-files \
 --enable-widec \
 --with-pkg-config-libdir=/usr/lib/pkgconfig
make
make DESTDIR=$PWD/dest install
install -vm755 dest/usr/lib/libncursesw.so.6.4 /usr/lib
rm -v dest/usr/lib/libncursesw.so.6.4
cp -av dest/* /
for lib in ncurses form panel menu ; do
rm -vf /usr/lib/lib${lib}.so
echo "INPUT(-l${lib}w)" > /usr/lib/lib${lib}.so
ln -sfv ${lib}w.pc /usr/lib/pkgconfig/${lib}.pc
done


rm -vf /usr/lib/libcursesw.so
echo "INPUT(-lncursesw)" > /usr/lib/libcursesw.so
ln -sfv libncurses.so /usr/lib/libcurses.so

mkdir -pv /usr/share/doc/ncurses-6.4
cp -v -R doc/* /usr/share/doc/ncurses-6.4

make distclean
./configure --prefix=/usr \
 --with-shared \
 --without-normal \
 --without-debug \
 --without-cxx-binding \
 --with-abi-version=5
 make sources libs
cp -av lib/lib*.so.5* /usr/lib
 rm -rf /sources/ncurses-6.4

h2=$(date +%H ) 
M2=$(date +%M ) 
S2=$(date +%S ) 
echo "${FUNCNAME[0]} is finished $((h1-h2))hour $((M1-M2))minutes $((S1- S2 ))seconds" >> /finish.txt


}


function SED(){ 
S1=$(date +%S ) 
h1=$(date +%H ) 
M1=$(date +%M ) 

cd  /sources/
 tar -xvf sed-4.9.tar.xz
 cd /sources/sed-4.9
./configure --prefix=/usr
make
make html
chown -Rv tester .
su tester -c "PATH= make check"
make install
install -d -m755 /usr/share/doc/sed-4.9
install -m644 doc/sed.html /usr/share/doc/sed-4.9
rm -rf /sources/sed-4.9
h2=$(date +%H ) 
M2=$(date +%M ) 
S2=$(date +%S ) 
echo "${FUNCNAME[0]} is finished $((h1-h2))hour $((M1-M2))minutes $((S1- S2 ))seconds" >> /finish.txt

}


function PSMISC(){ 
S1=$(date +%S ) 
h1=$(date +%H ) 
M1=$(date +%M ) 

cd  /sources/
 tar -xvf psmisc-23.6.tar.xz
 cd /sources/psmisc-23.6
./configure --prefix=/usr
make
make install

 rm -rf /sources/psmisc-23.6

h2=$(date +%H ) 
M2=$(date +%M ) 
S2=$(date +%S ) 
echo "${FUNCNAME[0]} is finished $((h1-h2))hour $((M1-M2))minutes $((S1- S2 ))seconds" >> /finish.txt


}

function GETTEXT(){ 
S1=$(date +%S ) 
h1=$(date +%H ) 
M1=$(date +%M ) 

cd  /sources
 tar -xvf gettext-0.21.1.tar.xz
 cd /sources/gettext-0.21.1
./configure --prefix=/usr \
 --disable-static \
 --docdir=/usr/share/doc/gettext-0.21.1
make
make check
make install
chmod -v 0755 /usr/lib/preloadable_libintl.so
 rm -rf /sources/gettext-0.21.1

h2=$(date +%H ) 
M2=$(date +%M ) 
S2=$(date +%S ) 
echo "${FUNCNAME[0]} is finished $((h1-h2))hour $((M1-M2))minutes $((S1- S2 ))seconds" >> /finish.txt


}



function BISON(){ 
S1=$(date +%S ) 
h1=$(date +%H ) 
M1=$(date +%M ) 

cd  /sources/
 tar -xvf bison-3.8.2.tar.xz
 cd /sources/bison-3.8.2
 ./configure --prefix=/usr --docdir=/usr/share/doc/bison-3.8.2
 make
 make check
make install
rm -rf /sources/bison-3.8.2
h2=$(date +%H ) 
M2=$(date +%M ) 
S2=$(date +%S ) 
echo "${FUNCNAME[0]} is finished $((h1-h2))hour $((M1-M2))minutes $((S1- S2 ))seconds" >> /finish.txt

}


function GREP(){ 
S1=$(date +%S ) 
h1=$(date +%H ) 
M1=$(date +%M ) 

cd  /sources/
 tar -xvf grep-3.8.tar.xz
 cd /sources/grep-3.8
sed -i "s/echo/#echo/" src/egrep.sh
./configure --prefix=/usr
make
make check
make install
rm -rf /sources/grep-3.8
h2=$(date +%H ) 
M2=$(date +%M ) 
S2=$(date +%S ) 
echo "${FUNCNAME[0]} is finished $((h1-h2))hour $((M1-M2))minutes $((S1- S2 ))seconds" >> /finish.txt

}


function BASH(){ 
S1=$(date +%S ) 
h1=$(date +%H ) 
M1=$(date +%M ) 

cd  /sources/
 tar -xvf bash-5.2.15.tar.gz
 cd /sources/bash-5.2.15
./configure --prefix=/usr \
 --without-bash-malloc \
 --with-installed-readline \
 --docdir=/usr/share/doc/bash-5.2.15

make
chown -Rv tester .
su -s /usr/bin/expect tester << EOF
set timeout -1
spawn make tests
expect eof
lassign [wait] _ _ _ value
exit $value
EOF

make install
exec /usr/bin/bash --login

 rm -rf /sources/bash-5.2.15
h2=$(date +%H ) 
M2=$(date +%M ) 
S2=$(date +%S ) 
echo "${FUNCNAME[0]} is finished $((h1-h2))hour $((M1-M2))minutes $((S1- S2 ))seconds" >> /finish.txt


}



function LIBTOOL(){ 
S1=$(date +%S ) 
h1=$(date +%H ) 
M1=$(date +%M ) 

cd  /sources/
 tar -xvf libtool-2.4.7.tar.xz
 cd /sources/libtool-2.4.7
./configure --prefix=/usr
make
make -k check
make install
rm -fv /usr/lib/libltdl.a
rm -rf /sources/libtool-2.4.7
h2=$(date +%H ) 
M2=$(date +%M ) 
S2=$(date +%S ) 
echo "${FUNCNAME[0]} is finished $((h1-h2))hour $((M1-M2))minutes $((S1- S2 ))seconds" >> /finish.txt

}





function GDBM(){ 
S1=$(date +%S ) 
h1=$(date +%H ) 
M1=$(date +%M ) 

cd  /sources/
 tar -xvf gdbm-1.23.tar.gz
 cd /sources/gdbm-1.23
./configure --prefix=/usr \
 --disable-static \
 --enable-libgdbm-compat
make
make check
make install
rm -rf /sources/gdbm-1.23
h2=$(date +%H ) 
M2=$(date +%M ) 
S2=$(date +%S ) 
echo "${FUNCNAME[0]} is finished $((h1-h2))hour $((M1-M2))minutes $((S1- S2 ))seconds" >> /finish.txt

}



function GPERF(){ 
S1=$(date +%S ) 
h1=$(date +%H ) 
M1=$(date +%M ) 

cd  /sources/
 tar -xvf gperf-3.1.tar.gz
 cd /sources/gperf-3.1
./configure --prefix=/usr --docdir=/usr/share/doc/gperf-3.1
make
make -j1 check
make install
rm -rf /sources/gperf-3.1
h2=$(date +%H ) 
M2=$(date +%M ) 
S2=$(date +%S ) 
echo "${FUNCNAME[0]} is finished $((h1-h2))hour $((M1-M2))minutes $((S1- S2 ))seconds" >> /finish.txt

}




function EXPAT (){ 
S1=$(date +%S ) 
h1=$(date +%H ) 
M1=$(date +%M ) 

cd  /sources/
 tar -xvf expat-2.5.0.tar.xz
 cd /sources/expat-2.5.0
./configure --prefix=/usr \
 --disable-static \
 --docdir=/usr/share/doc/expat-2.5.0
make 
make check
make install
install -v -m644 doc/*.{html,css} /usr/share/doc/expat-2.5.0
rm -rf /sources/expat-2.5.0
h2=$(date +%H ) 
M2=$(date +%M ) 
S2=$(date +%S ) 
echo "${FUNCNAME[0]} is finished $((h1-h2))hour $((M1-M2))minutes $((S1- S2 ))seconds" >> /finish.txt

}



function  INETUTILS(){ 
S1=$(date +%S ) 
h1=$(date +%H ) 
M1=$(date +%M ) 

cd  /sources/
 tar -xvf inetutils-2.4.tar.xz
 cd /sources/inetutils-2.4
./configure --prefix=/usr \
 --bindir=/usr/bin \
 --localstatedir=/var \
 --disable-logger \
 --disable-whois \
 --disable-rcp \
 --disable-rexec \
 --disable-rlogin \
 --disable-rsh \
 --disable-servers
make
make check
make install
mv -v /usr/{,s}bin/ifconfig
rm -rf /sources/inetutils-2.4
h2=$(date +%H ) 
M2=$(date +%M ) 
S2=$(date +%S ) 
echo "${FUNCNAME[0]} is finished $((h1-h2))hour $((M1-M2))minutes $((S1- S2 ))seconds" >> /finish.txt

}



function LESS(){ 
S1=$(date +%S ) 
h1=$(date +%H ) 
M1=$(date +%M ) 

cd  /sources/
 tar -xvf less-608.tar.gz
 cd /sources/less-608
./configure --prefix=/usr --sysconfdir=/etc
make
make install
 rm -rf /sources/less-608
h2=$(date +%H ) 
M2=$(date +%M ) 
S2=$(date +%S ) 
echo "${FUNCNAME[0]} is finished $((h1-h2))hour $((M1-M2))minutes $((S1- S2 ))seconds" >> /finish.txt


}



function PERL(){ 
S1=$(date +%S ) 
h1=$(date +%H ) 
M1=$(date +%M ) 

cd  /sources/
 tar -xvf perl-5.36.0.tar.xz
 cd /sources/perl-5.36.0
export BUILD_ZLIB=False
export BUILD_BZIP2=0
sh Configure -des \
 -Dprefix=/usr \
 -Dvendorprefix=/usr \
 -Dprivlib=/usr/lib/perl5/5.36/core_perl  \
 -Darchlib=/usr/lib/perl5/5.36/core_perl \
 -Dsitelib=/usr/lib/perl5/5.36/site_perl \
 -Dsitearch=/usr/lib/perl5/5.36/site_perl \
 -Dvendorlib=/usr/lib/perl5/5.36/vendor_perl \
 -Dvendorarch=/usr/lib/perl5/5.36/vendor_perl \
 -Dman1dir=/usr/share/man/man1 \
 -Dman3dir=/usr/share/man/man3 \
 -Dpager="/usr/bin/less -isR" \
 -Duseshrplib \
 -Dusethreads

make
make test 
make install
unset BUILD_ZLIB BUILD_BZIP2
rm -rf /sources/perl-5.36.0
h2=$(date +%H ) 
M2=$(date +%M ) 
S2=$(date +%S ) 
echo "${FUNCNAME[0]} is finished $((h1-h2))hour $((M1-M2))minutes $((S1- S2 ))seconds" >> /finish.txt

}

#######################################3
# function XML_PARSER(){ 
# S1=$(date +%S ) 
# h1=$(date +%H ) 
# M1=$(date +%M ) 

# cd  /sources/
#  tar -xvf 
#  cd /sources/



 
# }
#######################################page 161

function INTLTOOL(){ 
S1=$(date +%S ) 
h1=$(date +%H ) 
M1=$(date +%M ) 

cd  /sources/
 tar -xvf intltool-0.51.0.tar.gz
 cd /sources/intltool-0.51.0
sed -i 's:\\\${:\\\$\\{:' intltool-update.in
./configure --prefix=/usr
make
make check
make install
install -v -Dm644 doc/I18N-HOWTO /usr/share/doc/intltool-0.51.0/I18N-HOWTO
 rm -rf /sources/intltool-0.51.0
h2=$(date +%H ) 
M2=$(date +%M ) 
S2=$(date +%S ) 
echo "${FUNCNAME[0]} is finished $((h1-h2))hour $((M1-M2))minutes $((S1- S2 ))seconds" >> /finish.txt



}



function AUTOCONF(){ 
S1=$(date +%S ) 
h1=$(date +%H ) 
M1=$(date +%M ) 

cd  /sources/
 tar -xvf autoconf-2.71.tar.xz
 cd /sources/autoconf-2.71
sed -e 's/SECONDS|/&SHLVL|/' \
 -e '/BASH_ARGV=/a\ /^SHLVL=/ d' \
 -i.orig tests/local.at
./configure --prefix=/usr
make
make check
make install
rm -rf /sources/autoconf-2.71
h2=$(date +%H ) 
M2=$(date +%M ) 
S2=$(date +%S ) 
echo "${FUNCNAME[0]} is finished $((h1-h2))hour $((M1-M2))minutes $((S1- S2 ))seconds" >> /finish.txt

}



function AUTOMAKE(){ 
S1=$(date +%S ) 
h1=$(date +%H ) 
M1=$(date +%M ) 

cd  /sources/
 tar -xvf automake-1.16.5.tar.xz
 cd /sources/automake-1.16.5
./configure --prefix=/usr --docdir=/usr/share/doc/automake-1.16.5
make
make -j4 check
make install
rm -rf /sources/automake-1.16.5
h2=$(date +%H ) 
M2=$(date +%M ) 
S2=$(date +%S ) 
echo "${FUNCNAME[0]} is finished $((h1-h2))hour $((M1-M2))minutes $((S1- S2 ))seconds" >> /finish.txt

}


function OPENSSL(){ 
S1=$(date +%S ) 
h1=$(date +%H ) 
M1=$(date +%M ) 

cd  /sources/
 tar -xvf openssl-3.0.8.tar.gz
 cd /sources/openssl-3.0.8
./config --prefix=/usr \
 --openssldir=/etc/ssl \
 --libdir=lib \
 shared \
 zlib-dynamic
make
make test
sed -i '/INSTALL_LIBS/s/libcrypto.a libssl.a//' Makefile
make MANSUFFIX=ssl install
mv -v /usr/share/doc/openssl /usr/share/doc/openssl-3.0.8
cp -vfr doc/* /usr/share/doc/openssl-3.0.8
rm -rf /sources/openssl-3.0.8
h2=$(date +%H ) 
M2=$(date +%M ) 
S2=$(date +%S ) 
echo "${FUNCNAME[0]} is finished $((h1-h2))hour $((M1-M2))minutes $((S1- S2 ))seconds" >> /finish.txt

}


function KMOD(){ 
S1=$(date +%S ) 
h1=$(date +%H ) 
M1=$(date +%M ) 

cd  /sources/
 tar -xvf kmod-30.tar.xz
 cd /sources/kmod-30
./configure --prefix=/usr \
 --sysconfdir=/etc \
 --with-openssl \
 --with-xz \
 --with-zstd \
 --with-zlib
make
make install
for target in depmod insmod modinfo modprobe rmmod; do
ln -sfv ../bin/kmod /usr/sbin/$target
done
ln -sfv kmod /usr/bin/lsmod

 rm -rf /sources/kmod-30

h2=$(date +%H ) 
M2=$(date +%M ) 
S2=$(date +%S ) 
echo "${FUNCNAME[0]} is finished $((h1-h2))hour $((M1-M2))minutes $((S1- S2 ))seconds" >> /finish.txt


}



function ELFUTILS(){ 
S1=$(date +%S ) 
h1=$(date +%H ) 
M1=$(date +%M ) 

cd  /sources/
 tar -xvf elfutils-0.188.tar.bz2
 cd /sources/elfutils-0.188

./configure --prefix=/usr \
 --disable-debuginfod \
 --enable-libdebuginfod=dummy
make
make check
make -C libelf install
install -vm644 config/libelf.pc /usr/lib/pkgconfig
rm /usr/lib/libelf.a

 rm -rf /sources/elfutils-0.188

h2=$(date +%H ) 
M2=$(date +%M ) 
S2=$(date +%S ) 
echo "${FUNCNAME[0]} is finished $((h1-h2))hour $((M1-M2))minutes $((S1- S2 ))seconds" >> /finish.txt


}


function LIBFFI(){ 
S1=$(date +%S ) 
h1=$(date +%H ) 
M1=$(date +%M ) 

cd  /sources/
 tar -xvf libffi-3.4.4.tar.gz
 cd /sources/libffi-3.4.4
./configure --prefix=/usr \
 --disable-static \
 --with-gcc-arch=native
make
make check
make install
 rm -rf /sources/libffi-3.4.4
h2=$(date +%H ) 
M2=$(date +%M ) 
S2=$(date +%S ) 
echo "${FUNCNAME[0]} is finished $((h1-h2))hour $((M1-M2))minutes $((S1- S2 ))seconds" >> /finish.txt



}



function PYTHON(){ 
S1=$(date +%S ) 
h1=$(date +%H ) 
M1=$(date +%M ) 

cd  /sources/
 tar -xvf python-3.11.2-docs-html.tar.bz2
 cd /sources/python-3.11.2-docs-html
./configure --prefix=/usr \
 --enable-shared \
 --with-system-expat \
 --with-system-ffi \
 --enable-optimizations
make
make install
cat > /etc/pip.conf << EOF
[global]
root-user-action = ignore
disable-pip-version-check = true
EOF

install -v -dm755 /usr/share/doc/python-3.11.2/html
tar --strip-components=1 \
 --no-same-owner \
 --no-same-permissions \
 -C /usr/share/doc/python-3.11.2/html \
 -xvf ../python-3.11.2-docs-html.tar.bz2
 rm -rf /sources/python-3.11.2-docs-html
h2=$(date +%H ) 
M2=$(date +%M ) 
S2=$(date +%S ) 
echo "${FUNCNAME[0]} is finished $((h1-h2))hour $((M1-M2))minutes $((S1- S2 ))seconds" >> /finish.txt



}


function WHEEL(){ 
S1=$(date +%S ) 
h1=$(date +%H ) 
M1=$(date +%M ) 

cd  /sources/
 tar -xvf wheel-0.38.4.tar.gz
 cd /sources/wheel-0.38.4
PYTHONPATH=src pip3 wheel -w dist --no-build-isolation --no-deps $PWD
pip3 install --no-index --find-links=dist wheel
 rm -rf /sources/wheel-0.38.4
h2=$(date +%H ) 
M2=$(date +%M ) 
S2=$(date +%S ) 
echo "${FUNCNAME[0]} is finished $((h1-h2))hour $((M1-M2))minutes $((S1- S2 ))seconds" >> /finish.txt



}


function   NINJA(){ 
S1=$(date +%S ) 
h1=$(date +%H ) 
M1=$(date +%M ) 

cd  /sources/
 tar -xvf ninja-1.11.1.tar.gz
 cd /sources/ninja-1.11.1
export NINJAJOBS=4
sed -i '/int Guess/a \
 int
 j = 0;\
 char* jobs = getenv( "NINJAJOBS" );\
 if ( jobs != NULL ) j = atoi( jobs );\
 if ( j > 0 ) return j;\
 ' src/ninja.cc
python3 configure.py --bootstrap
./ninja ninja_test
./ninja_test --gtest_filter=-SubprocessTest.SetWithLots
install -vm755 ninja /usr/bin/
install -vDm644 misc/bash-completion /usr/share/bash-completion/completions/ninja
install -vDm644 misc/zsh-completion /usr/share/zsh/site-functions/_ninja
 rm -rf /sources/ninja-1.11.1

h2=$(date +%H ) 
M2=$(date +%M ) 
S2=$(date +%S ) 
echo "${FUNCNAME[0]} is finished $((h1-h2))hour $((M1-M2))minutes $((S1- S2 ))seconds" >> /finish.txt


}


function MESON(){ 
S1=$(date +%S ) 
h1=$(date +%H ) 
M1=$(date +%M ) 

cd  /sources/
 tar -xvf meson-1.0.0.tar.gz
 cd /sources/meson-1.0.0
pip3 wheel -w dist --no-build-isolation --no-deps $PWD
pip3 install --no-index --find-links dist meson
install -vDm644 data/shell-completions/bash/meson /usr/share/bash-completion/completions/meson
install -vDm644 data/shell-completions/zsh/_meson /usr/share/zsh/site-functions/_meson

 rm -rf /sources/meson-1.0.0

h2=$(date +%H ) 
M2=$(date +%M ) 
S2=$(date +%S ) 
echo "${FUNCNAME[0]} is finished $((h1-h2))hour $((M1-M2))minutes $((S1- S2 ))seconds" >> /finish.txt


}


function COREUTILS(){ 
S1=$(date +%S ) 
h1=$(date +%H ) 
M1=$(date +%M ) 

cd  /sources/
 tar -xvf coreutils-9.1.tar.xz
 cd /sources/coreutils-9.1
patch -Np1 -i ../coreutils-9.1-i18n-1.patch
autoreconf -fiv
FORCE_UNSAFE_CONFIGURE=1 ./configure \
 --prefix=/usr \
 --enable-no-install-program=kill,uptime
make
make NON_ROOT_USERNAME=tester check-root
echo "dummy:x:102:tester" >> /etc/group
chown -Rv tester .
su tester -c "PATH= make RUN_EXPENSIVE_TESTS=yes check"
sed -i '/dummy/d' /etc/group
make install
mv -v /usr/bin/chroot /usr/sbin
mv -v /usr/share/man/man1/chroot.1 /usr/share/man/man8/chroot.8
sed -i 's/"1"/"8"/' /usr/share/man/man8/chroot.8

 rm -rf /sources/coreutils-9.1

h2=$(date +%H ) 
M2=$(date +%M ) 
S2=$(date +%S ) 
echo "${FUNCNAME[0]} is finished $((h1-h2))hour $((M1-M2))minutes $((S1- S2 ))seconds" >> /finish.txt


}


function CHECK(){ 
S1=$(date +%S ) 
h1=$(date +%H ) 
M1=$(date +%M ) 

cd  /sources/
 tar -xvf check-0.15.2.tar.gz
 cd /sources/check-0.15.2
./configure --prefix=/usr --disable-static
make
make check
make docdir=/usr/share/doc/check-0.15.2 install
rm -rf /sources/check-0.15.2
h2=$(date +%H ) 
M2=$(date +%M ) 
S2=$(date +%S ) 
echo "${FUNCNAME[0]} is finished $((h1-h2))hour $((M1-M2))minutes $((S1- S2 ))seconds" >> /finish.txt

}



function DIFFUTILS(){ 
S1=$(date +%S ) 
h1=$(date +%H ) 
M1=$(date +%M ) 

cd  /sources/
 tar -xvf diffutils-3.9.tar.xz
 cd /sources/diffutils-3.9
./configure --prefix=/usr
make
make check
make install
 rm -rf /sources/diffutils-3.9
h2=$(date +%H ) 
M2=$(date +%M ) 
S2=$(date +%S ) 
echo "${FUNCNAME[0]} is finished $((h1-h2))hour $((M1-M2))minutes $((S1- S2 ))seconds" >> /finish.txt



}




function GAWK(){ 
S1=$(date +%S ) 
h1=$(date +%H ) 
M1=$(date +%M ) 

cd  /sources/
 tar -xvf gawk-5.2.1.tar.xz
 cd /sources/gawk-5.2.1
sed -i 's/extras//' Makefile.in
./configure --prefix=/usr
make
make check
make LN='ln -f' install
mkdir -pv /usr/share/doc/gawk-5.2.1
cp -v doc/{awkforai.txt,*.{eps,pdf,jpg}} /usr/share/doc/gawk-5.2.1


 rm -rf /sources/gawk-5.2.1
h2=$(date +%H ) 
M2=$(date +%M ) 
S2=$(date +%S ) 
echo "${FUNCNAME[0]} is finished $((h1-h2))hour $((M1-M2))minutes $((S1- S2 ))seconds" >> /finish.txt

}





function FINDUTILS(){ 
S1=$(date +%S ) 
h1=$(date +%H ) 
M1=$(date +%M ) 

cd  /sources/
 tar -xvf findutils-4.9.0.tar.xz
 cd /sources/findutils-4.9.0
case $(uname -m) in
    i?86) TIME_T_32_BIT_OK=yes ./configure --prefix=/usr --localstatedir=/var/lib/locate ;;
    x86_64) ./configure --prefix=/usr --localstatedir=/var/lib/locate ;;
esac
make
chown -Rv tester .
su tester -c "PATH= make check"
make install
 rm -rf /sources/findutils-4.9.0
h2=$(date +%H ) 
M2=$(date +%M ) 
S2=$(date +%S ) 
echo "${FUNCNAME[0]} is finished $((h1-h2))hour $((M1-M2))minutes $((S1- S2 ))seconds" >> /finish.txt



}









function GROFF(){ 
S1=$(date +%S ) 
h1=$(date +%H ) 
M1=$(date +%M ) 

cd  /sources/
 tar -xvf groff-1.22.4.tar.gz
 cd /sources/groff-1.22.4
PAGE=<paper_size> ./configure --prefix=/usr
make
make install

 rm -rf /sources/groff-1.22.4
h2=$(date +%H ) 
M2=$(date +%M ) 
S2=$(date +%S ) 
echo "${FUNCNAME[0]} is finished $((h1-h2))hour $((M1-M2))minutes $((S1- S2 ))seconds" >> /finish.txt



}









function GRUP(){ 
S1=$(date +%S ) 
h1=$(date +%H ) 
M1=$(date +%M ) 

cd  /sources/
 tar -xvf grub-2.06.tar.xz
 cd /sources/grub-2.06
unset {C,CPP,CXX,LD}FLAGS
patch -Np1 -i ../grub-2.06-upstream_fixes-1.patch
./configure --prefix=/usr \
 --sysconfdir=/etc \
 --disable-efiemu \
 --disable-werror
 make
 make install
mv -v /etc/bash_completion.d/grub /usr/share/bash-completion/completions

 rm -rf /sources/grub-2.06
h2=$(date +%H ) 
M2=$(date +%M ) 
S2=$(date +%S ) 
echo "${FUNCNAME[0]} is finished $((h1-h2))hour $((M1-M2))minutes $((S1- S2 ))seconds" >> /finish.txt

}








function GZIP(){ 
S1=$(date +%S ) 
h1=$(date +%H ) 
M1=$(date +%M ) 

cd  /sources/
 tar -xvf gzip-1.12.tar.xz
 cd /sources/gzip-1.12
./configure --prefix=/usr
make
make check
make install

 rm -rf /sources/gzip-1.12
h2=$(date +%H ) 
M2=$(date +%M ) 
S2=$(date +%S ) 
echo "${FUNCNAME[0]} is finished $((h1-h2))hour $((M1-M2))minutes $((S1- S2 ))seconds" >> /finish.txt



}









function IPROUTE(){ 
S1=$(date +%S ) 
h1=$(date +%H ) 
M1=$(date +%M ) 

cd  /sources/
 tar -xvf iproute2-6.1.0.tar.xz
 cd /sources/iproute2-6.1.0
sed -i /ARPD/d Makefile
rm -fv man/man8/arpd.8
make NETNS_RUN_DIR=/run/netns
make SBINDIR=/usr/sbin install
mkdir -pv /usr/share/doc/iproute2-6.1.0
cp -v COPYING README* /usr/share/doc/iproute2-6.1.0
 rm -rf /sources/iproute2-6.1.0
h2=$(date +%H ) 
M2=$(date +%M ) 
S2=$(date +%S ) 
echo "${FUNCNAME[0]} is finished $((h1-h2))hour $((M1-M2))minutes $((S1- S2 ))seconds" >> /finish.txt



}









function KBD(){ 
S1=$(date +%S ) 
h1=$(date +%H ) 
M1=$(date +%M ) 

cd  /sources/
 tar -xvf kbd-2.5.1.tar.xz
 cd /sources/kbd-2.5.1
patch -Np1 -i ../kbd-2.5.1-backspace-1.patch
sed -i '/RESIZECONS_PROGS=/s/yes/no/' configure
sed -i 's/resizecons.8 //' docs/man/man8/Makefile.in
./configure --prefix=/usr --disable-vlock
make 
make check
make install
mkdir -pv /usr/share/doc/kbd-2.5.1
cp -R -v docs/doc/* /usr/share/doc/kbd-2.5.1
 rm -rf /sources/kbd-2.5.1

h2=$(date +%H ) 
M2=$(date +%M ) 
S2=$(date +%S ) 
echo "${FUNCNAME[0]} is finished $((h1-h2))hour $((M1-M2))minutes $((S1- S2 ))seconds" >> /finish.txt


}





function LIBPIPELINE(){ 
S1=$(date +%S ) 
h1=$(date +%H ) 
M1=$(date +%M ) 

cd  /sources/
 tar -xvf libpipeline-1.5.7.tar.gz
 cd /sources/libpipeline-1.5.7
./configure --prefix=/usr
make
make check
make install
 rm -rf /sources/libpipeline-1.5.7
h2=$(date +%H ) 
M2=$(date +%M ) 
S2=$(date +%S ) 
echo "${FUNCNAME[0]} is finished $((h1-h2))hour $((M1-M2))minutes $((S1- S2 ))seconds" >> /finish.txt



}





function MAKE(){ 
S1=$(date +%S ) 
h1=$(date +%H ) 
M1=$(date +%M ) 

cd  /sources/
 tar -xvf make-4.4.tar.gz
 cd /sources/make-4.4
sed -e '/ifdef SIGPIPE/,+2 d' \
 -e '/undef FATAL_SIG/i FATAL_SIG (SIGPIPE);' \
 -i src/main.c
./configure --prefix=/usr
make
make check
make install
rm -rf /sources/
h2=$(date +%H ) 
M2=$(date +%M ) 
S2=$(date +%S ) 
echo "${FUNCNAME[0]} is finished $((h1-h2))hour $((M1-M2))minutes $((S1- S2 ))seconds" >> /finish.txt

}





function PATCH(){ 
S1=$(date +%S ) 
h1=$(date +%H ) 
M1=$(date +%M ) 

cd  /sources/
 tar -xvf patch-2.7.6.tar.xz
 cd /sources/patch-2.7.6
./configure --prefix=/usr
make
make check
make install
 rm -rf /sources/patch-2.7.6
h2=$(date +%H ) 
M2=$(date +%M ) 
S2=$(date +%S ) 
echo "${FUNCNAME[0]} is finished $((h1-h2))hour $((M1-M2))minutes $((S1- S2 ))seconds" >> /finish.txt



}





function TAR(){ 
S1=$(date +%S ) 
h1=$(date +%H ) 
M1=$(date +%M ) 

cd  /sources/
 tar -xvf tar-1.34.tar.xz
 cd /sources/tar-1.34
FORCE_UNSAFE_CONFIGURE=1 \
 ./configure --prefix=/usr
make
make check
make install
make -C doc install-html docdir=/usr/share/doc/tar-1.34
 rm -rf /sources/tar-1.34
h2=$(date +%H ) 
M2=$(date +%M ) 
S2=$(date +%S ) 
echo "${FUNCNAME[0]} is finished $((h1-h2))hour $((M1-M2))minutes $((S1- S2 ))seconds" >> /finish.txt



}





function TEXINFO(){ 
S1=$(date +%S ) 
h1=$(date +%H ) 
M1=$(date +%M ) 

cd  /sources/
 tar -xvf texinfo-7.0.2.tar.xz
 cd /sources/texinfo-7.0.2
./configure --prefix=/usr
make
make check
make install
make TEXMF=/usr/share/texmf install-tex
pushd /usr/share/info
rm -v dir
for f in *
    do install-info $f dir 2>/dev/null
 done
popd

rm -rf /sources/texinfo-7.0.2
h2=$(date +%H ) 
M2=$(date +%M ) 
S2=$(date +%S ) 
echo "${FUNCNAME[0]} is finished $((h1-h2))hour $((M1-M2))minutes $((S1- S2 ))seconds" >> /finish.txt

}





function VIM(){ 
S1=$(date +%S ) 
h1=$(date +%H ) 
M1=$(date +%M ) 

cd  /sources/
 tar -xvf vim-9.0.1273.tar.xz
 cd /sources/vim-9.0.1273

echo '#define SYS_VIMRC_FILE "/etc/vimrc"' >> src/feature.h
./configure --prefix=/usr
make
chown -Rv tester .
su tester -c "LANG=en_US.UTF-8 make -j1 test" &> vim-test.log
make install
ln -sv vim /usr/bin/vi
for L in /usr/share/man/{,*/}man1/vim.1; do
    ln -sv vim.1 $(dirname $L)/vi.1
done
ln -sv ../vim/vim90/doc /usr/share/doc/vim-9.0.1273
cat > /etc/vimrc << "EOF"
" Begin /etc/vimrc
" Ensure defaults are set before customizing settings, not after
source $VIMRUNTIME/defaults.vim
let skip_defaults_vim=1
set nocompatible
set backspace=2
set mouse=
syntax on
if (&term == "xterm") || (&term == "putty")
set background=dark
endif
set spelllang=en,ru
set spell
" End /etc/vimrc
EOF
vim -c ':options'
 rm -rf /sources/vim-9.0.1273
h2=$(date +%H ) 
M2=$(date +%M ) 
S2=$(date +%S ) 
echo "${FUNCNAME[0]} is finished $((h1-h2))hour $((M1-M2))minutes $((S1- S2 ))seconds" >> /finish.txt



}





function EUDEV(){ 
S1=$(date +%S ) 
h1=$(date +%H ) 
M1=$(date +%M ) 

cd  /sources/
 tar -xvf eudev-3.2.11.tar.gz
 cd /sources/eudev-3.2.11
sed -i '/udevdir/a udev_dir=${udevdir}' src/udev/udev.pc.in
./configure --prefix=/usr \
 --bindir=/usr/sbin \
 --sysconfdir=/etc \
 --enable-manpages \
 --disable-static
make
mkdir -pv /usr/lib/udev/rules.d
mkdir -pv /etc/udev/rules.d
make check
make install
tar -xvf ../udev-lfs-20171102.tar.xz
make -f udev-lfs-20171102/Makefile.lfs install
udevadm hwdb --update
 rm -rf /sources/eudev-3.2.11

h2=$(date +%H ) 
M2=$(date +%M ) 
S2=$(date +%S ) 
echo "${FUNCNAME[0]} is finished $((h1-h2))hour $((M1-M2))minutes $((S1- S2 ))seconds" >> /finish.txt


}





function MAN_DB(){ 
S1=$(date +%S ) 
h1=$(date +%H ) 
M1=$(date +%M ) 

cd  /sources/
 tar -xvf man-db-2.11.2.tar.xz
 cd /sources/man-db-2.11.2
./configure --prefix=/usr  \
 --docdir=/usr/share/doc/man-db-2.11.2 \
 --sysconfdir=/etc \
 --disable-setuid \
 --enable-cache-owner=bin \
 --with-browser=/usr/bin/lynx \
 --with-vgrind=/usr/bin/vgrind \
 --with-grap=/usr/bin/grap \
 --with-systemdtmpfilesdir= \
 --with-systemdsystemunitdir=
make
make check
make install
 rm -rf /sources/man-db-2.11.2
h2=$(date +%H ) 
M2=$(date +%M ) 
S2=$(date +%S ) 
echo "${FUNCNAME[0]} is finished $((h1-h2))hour $((M1-M2))minutes $((S1- S2 ))seconds" >> /finish.txt



}





function PROCPS(){ 
S1=$(date +%S ) 
h1=$(date +%H ) 
M1=$(date +%M ) 

cd  /sources/
 tar -xvf procps-ng-4.0.2.tar.xz
 cd /sources/procps-ng-4.0.2

./configure --prefix=/usr \
 --docdir=/usr/share/doc/procps-ng-4.0.2 \
 --disable-static \
 --disable-kill
make
make check
make install
 rm -rf /sources/procps-ng-4.0.2

h2=$(date +%H ) 
M2=$(date +%M ) 
S2=$(date +%S ) 
echo "${FUNCNAME[0]} is finished $((h1-h2))hour $((M1-M2))minutes $((S1- S2 ))seconds" >> /finish.txt


}





function UTIL(){ 
S1=$(date +%S ) 
h1=$(date +%H ) 
M1=$(date +%M ) 

cd  /sources/
 tar -xvf util-linux-2.38.1.tar.xz
 cd /sources/util-linux-2.38.1

./configure ADJTIME_PATH=/var/lib/hwclock/adjtime \
 --bindir=/usr/bin \
 --libdir=/usr/lib \
 --sbindir=/usr/sbin \
 --disable-chfn-chsh \
 --disable-login \
 --disable-nologin \
 --disable-su \
 --disable-setpriv \
 --disable-runuser \
 --disable-pylibmount \
 --disable-static \
 --without-python \
 --without-systemd \
 --without-systemdsystemunitdir \
 --docdir=/usr/share/doc/util-linux-2.38.1
make
bash tests/run.sh --srcdir=$PWD --builddir=$PWD
chown -Rv tester .
su tester -c "make -k check"
make install
 rm -rf /sources/util-linux-2.38.1
h2=$(date +%H ) 
M2=$(date +%M ) 
S2=$(date +%S ) 
echo "${FUNCNAME[0]} is finished $((h1-h2))hour $((M1-M2))minutes $((S1- S2 ))seconds" >> /finish.txt



}





function  E2FSPROGS (){ 
S1=$(date +%S ) 
h1=$(date +%H ) 
M1=$(date +%M ) 

cd  /sources/
 tar -xvf e2fsprogs-1.47.0.tar.gz
 cd /sources/e2fsprogs-1.47.0
mkdir -v build
cd build
../configure --prefix=/usr \
 --sysconfdir=/etc \
 --enable-elf-shlibs \
 --disable-libblkid \
 --disable-libuuid \
 --disable-uuidd \
 --disable-fsck
make
make check
make install
rm -fv /usr/lib/{libcom_err,libe2p,libext2fs,libss}.a
gunzip -v /usr/share/info/libext2fs.info.gz
install-info --dir-file=/usr/share/info/dir /usr/share/info/libext2fs.info
makeinfo -o doc/com_err.info ../lib/et/com_err.texinfo
install -v -m644 doc/com_err.info /usr/share/info
install-info --dir-file=/usr/share/info/dir /usr/share/info/com_err.info
 sed 's/metadata_csum_seed,//' -i /etc/mke2fs.conf

 rm -rf /sources/e2fsprogs-1.47.0
h2=$(date +%H ) 
M2=$(date +%M ) 
S2=$(date +%S ) 
echo "${FUNCNAME[0]} is finished $((h1-h2))hour $((M1-M2))minutes $((S1- S2 ))seconds" >> /finish.txt



}





function SYSKLOGD(){ 
S1=$(date +%S ) 
h1=$(date +%H ) 
M1=$(date +%M ) 

cd  /sources/
 tar -xvf sysklogd-1.5.1.tar.gz
 cd /sources/sysklogd-1.5.1
sed -i '/Error loading kernel symbols/{n;n;d}' ksym_mod.c
sed -i 's/union wait/int/' syslogd.c
make
make BINDIR=/sbin install
cat > /etc/syslog.conf << "EOF"
# Begin /etc/syslog.conf
auth,authpriv.* -/var/log/auth.log
*.*;auth,authpriv.none -/var/log/sys.log
daemon.* -/var/log/daemon.log
kern.* -/var/log/kern.log
mail.* -/var/log/mail.log
user.* -/var/log/user.log
*.emerg *
# End /etc/syslog.conf
EOF

 rm -rf /sources/sysklogd-1.5.1

h2=$(date +%H ) 
M2=$(date +%M ) 
S2=$(date +%S ) 
echo "${FUNCNAME[0]} is finished $((h1-h2))hour $((M1-M2))minutes $((S1- S2 ))seconds" >> /finish.txt


}




function SYSVINIT(){ 
S1=$(date +%S ) 
h1=$(date +%H ) 
M1=$(date +%M ) 

cd  /sources/
 tar -xvf sysvinit-3.06.tar.xz
 cd /sources/sysvinit-3.06
patch -Np1 -i ../sysvinit-3.06-consolidated-1.patch
make 
make install
rm -rf /sources/sysvinit-3.06
h2=$(date +%H ) 
M2=$(date +%M ) 
S2=$(date +%S ) 
echo "${FUNCNAME[0]} is finished $((h1-h2))hour $((M1-M2))minutes $((S1- S2 ))seconds" >> /finish.txt


}

